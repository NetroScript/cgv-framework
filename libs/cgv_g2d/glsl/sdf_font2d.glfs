#version 430

//***** begin interface of shape2d.glsl ***********************************
uniform vec4 fill_color;
uniform float border_radius = 0.0;
uniform float feather_origin = 0.5;

float get_feather_width();
vec2 get_shape_size();
vec4 get_active_color(vec4 color);
vec4 transform_world_to_window_space(vec2 p);
//***** end interface of shape2d.glsl ***********************************

//***** begin interface of fragment2d.glfs ***********************************
uniform layout(binding = 0) sampler2D tex;

void finish_sdf_fragment2d(in float signed_distance, in vec4 color);
void finish_sdf_fragment2d(in float signed_distance, in vec4 color, in vec2 texcoords);
void finish_fragment2d(in vec4 color);
void finish_fragment2d(in vec4 color, in vec2 texcoords);
//***** end interface of fragment2d.glfs ***********************************

uniform float src_size = 32.0;
uniform float pixel_range = 2.0;
uniform float font_size;
uniform float true_sdf_mix_factor = 0.0;

in vec2 pix_coord;
in vec2 tex_coord;

/*--------------------------------------------------------------------------*\
Copyright (c) 2008-2009, Danny Ruijters. All rights reserved.
http://www.dannyruijters.nl/cubicinterpolation/
This file is part of CUDA Cubic B-Spline Interpolation (CI).
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
*  Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
*  Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
*  Neither the name of the copyright holders nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
The views and conclusions contained in the software and documentation are
those of the authors and should not be interpreted as representing official
policies, either expressed or implied.
When using this code in a scientific project, please cite one or all of the
following papers:
*  Daniel Ruijters and Philippe Thévenaz,
   GPU Prefilter for Accurate Cubic B-Spline Interpolation, 
   The Computer Journal, vol. 55, no. 1, pp. 15-20, January 2012.
   http://dannyruijters.nl/docs/cudaPrefilter3.pdf
*  Daniel Ruijters, Bart M. ter Haar Romeny, and Paul Suetens,
   Efficient GPU-Based Texture Interpolation using Uniform B-Splines,
   Journal of Graphics Tools, vol. 13, no. 4, pp. 61-69, 2008.
\*--------------------------------------------------------------------------*/

// bicubic interpolation function derived from tricubic interpolation (see copyright notice above)
vec4 textureCubic(sampler2D tex, vec2 coord) {
	// shift the coordinate from [0,1] to [-0.5, tex_size-0.5]
	vec2 tex_size = vec2(textureSize(tex, 0));
	vec2 coord_grid = coord * tex_size - 0.5;
	vec2 index = floor(coord_grid);
	vec2 fraction = coord_grid - index;
	vec2 one_frac = 1.0 - fraction;

	vec2 w0 = 1.0/6.0 * one_frac*one_frac*one_frac;
	vec2 w1 = 2.0/3.0 - 0.5 * fraction*fraction*(2.0-fraction);
	vec2 w2 = 2.0/3.0 - 0.5 * one_frac*one_frac*(2.0-one_frac);
	vec2 w3 = 1.0/6.0 * fraction*fraction*fraction;

	vec2 g0 = w0 + w1;
	vec2 g1 = w2 + w3;
	vec2 mult = 1.0 / tex_size;
	vec2 h0 = mult * ((w1 / g0) - 0.5 + index);  //h0 = w1/g0 - 1, move from [-0.5, nrOfVoxels-0.5] to [0,1]
	vec2 h1 = mult * ((w3 / g1) + 1.5 + index);  //h1 = w3/g1 + 1, move from [-0.5, nrOfVoxels-0.5] to [0,1]

	// fetch the four linear interpolations
	// weighting and fetching is interleaved for performance and stability reasons
	vec4 tex00 = texture(tex, vec2(h0.x, h0.y));
	vec4 tex10 = texture(tex, vec2(h1.x, h0.y));
	tex00 = mix(tex10, tex00, g0.x);  //weigh along the x-direction
	vec4 tex01 = texture(tex, vec2(h0.x, h1.y));
	vec4 tex11 = texture(tex, vec2(h1.x, h1.y));
	tex01 = mix(tex11, tex01, g0.x);  //weigh along the x-direction

	return mix(tex01, tex00, g0.y);  //weigh along the y-direction
}

float median(float r, float g, float b) {
	return max(min(r, g), min(max(r, g), b));
}

float screenPxRange() {
	float screen_size = font_size;
	//float src_size = 48.0;
	//float pixel_range = 8.0;
	return max((screen_size/src_size) * pixel_range, 1.0);
}

void main() {
	
	//override_color(vec4(1.0, 0.0, 0.0, 1.0));
	//vec4 col = texture(tex, tex_coord);
	//col.rgb *= col.a;
	//col.a = 1.0;
	//override_color(col);
	//finish_fragment2d();
	//return;

	vec4 mtsd = texture(tex, tex_coord).rgba;
	float sd = median(mtsd.r, mtsd.g, mtsd.b) * mix(1.0, mtsd.a, true_sdf_mix_factor);
	//float screenPxDistance = screenPxRange()*(sd - 0.5);
	//float opacity = clamp(screenPxDistance + 0.5, 0.0, 1.0);

	if(sd <= 0.0)
		discard;

	float signed_distance = -(screenPxRange()*(sd-0.5) + 0.5);
	signed_distance -= border_radius;
	signed_distance -= feather_origin*get_feather_width();

	finish_sdf_fragment2d(signed_distance, get_active_color(fill_color));
}
