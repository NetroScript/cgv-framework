#version 430

//***** begin interface of shape2d.glsl ***********************************
uniform vec4 border_color = vec4(1.0);
uniform float border_width = 0.0;
//uniform vec2 tex_scaling = vec2(1.0);

uniform bool use_smooth_feather = false;

float get_feather_width();
vec2 get_shape_size();
vec4 get_active_color(vec4 color);
vec4 transform_world_to_window_space(vec2 p);
//***** end interface of shape2d.glsl ***********************************

//***** begin interface of fragment2d.glfs ***********************************
void finish_sdf_fragment2d(in float signed_distance, in vec4 color);
void finish_sdf_fragment2d(in float signed_distance, in vec4 color, in vec2 texcoords);
void finish_fragment2d(in vec4 color);
void finish_fragment2d(in vec4 color, in vec2 texcoords);
//***** end interface of fragment2d.glfs ***********************************

uniform float width = 1.0;
uniform float dash_length = 0.0;
uniform float dash_ratio = 0.5;

in flat vec4 color0_fs;
in flat vec4 color1_fs;
in flat vec2 size_fs;
in vec2 tex_coord_fs;
in vec2 pix_coord_fs;
in flat vec2 pos_a_fs;
in flat vec2 pos_b_fs;
in flat vec2 pos_c_fs;
in flat vec2 pos_d_fs;
in flat vec2 pos_e_fs;

float dot2(in vec2 v) {
	return dot(v,v);
}

float cross2(in vec2 a, in vec2 b) {
	return a.x*b.y - a.y*b.x;
}

float op_union(float d1, float d2)
{
	return min(d1, d2);
}

float op_subtraction(float d1, float d2)
{
	return max(-d1, d2);
}

// https://www.shadertoy.com/view/MlKcDD
vec2 ud_bezier2(in vec2 pos, in vec2 A, in vec2 B, in vec2 C) {
	vec2 a = B - A;
	vec2 b = A - 2.0*B + C;
	vec2 c = a * 2.0;
	vec2 d = A - pos;

	float kk = 1.0 / dot(b, b);
	float kx = kk * dot(a, b);
	float ky = kk * (2.0*dot(a, a) + dot(d, b)) / 3.0;
	float kz = kk * dot(d, a);

	vec2 res;

	float p = ky - kx * kx;
	float p3 = p * p * p;
	float q = kx * (2.0*kx*kx - 3.0*ky) + kz;
	float h = q * q + 4.0*p3;

	if(h >= 0.0) {
		h = sqrt(h);
		vec2 x = (vec2(h, -h) - q) / 2.0;
		vec2 uv = sign(x)*pow(abs(x), vec2(1.0 / 3.0));
		float t = clamp(uv.x + uv.y - kx, 0.0, 1.0);

		// 1 root
		res = vec2(dot2(d + (c + b * t)*t), t);
	} else {
		float z = sqrt(-p);
		float v = acos(q / (p*z*2.0)) / 3.0;
		float m = cos(v);
		float n = sin(v) * 1.732050808;
		vec3 t = clamp(vec3(m + m, -n - m, n - m) * z - kx, 0.0, 1.0);

		// 3 roots, but only need two
		float dis = dot2(d + (c + b * t.x) * t.x);
		res = vec2(dis, t.x);

		dis = dot2(d + (c + b * t.y) * t.y);
		if(dis < res.x) res = vec2(dis, t.y);

		// the third root cannot be the closest. See https://www.shadertoy.com/view/4dsfRS
        // res = min(res,dot2(d+(c+b*t.z)*t.z));
	}

	res.x = sqrt(res.x);
	return res;
}


void main() {
	/*
	float dist0 = ud_bezier(pix_coord_fs, pos_a_fs, pos_b_fs, pos_c_fs);
	float dist1 = ud_bezier(pix_coord_fs, pos_c_fs, pos_d_fs, pos_e_fs);
	
	dist0 -= 0.5*width;
	dist1 -= 0.5*width;

	float dist = op_union(dist0, dist1);
	*/

	vec2 dist0 = ud_bezier2(pix_coord_fs, pos_a_fs, pos_b_fs, pos_c_fs);
	vec2 dist1 = ud_bezier2(pix_coord_fs, pos_c_fs, pos_d_fs, pos_e_fs);

	// union with selection of curve parameter t
	float dist, t;
	if(dist0.x < dist1.x) {
		dist = dist0.x;
		t = dist0.y;
	} else {
		dist = dist1.x;
		t = dist1.y + 1.0;
	}

	dist -= 0.5 * width;
	t *= 0.5;

	float fw = get_feather_width();
	if(dist.x > 0.5*fw)
		discard;

	// texture coordinates
	vec2 uv = vec2(t, -2.0 * dist / width);

	float dist_since_start = t * (size_fs.x - fw);
	dist_since_start = mod(dist_since_start, dash_length);
	float dash_coord = dist_since_start - (0.5*dash_ratio*dash_length);
	float dash_dist = abs(dash_coord);
	float dash_limit = (0.5*dash_ratio*dash_length) - fw;

	vec4 color = mix(color0_fs, color1_fs, t);
	color = get_active_color(color);

	float limit = -0.5*fw;
	float inv_feather = 1.0 / fw;
	
	float feather_alpha = use_smooth_feather ?
		1.0 - smoothstep(0.0, 1.0, (dist - limit) * inv_feather) :
		1.0 - clamp((dist - limit) * inv_feather, 0.0, 1.0);

	if(border_width > 0.0) {
		float border_limit = -border_width - 0.5*fw;
		float border_feather_alpha = clamp((dist - border_limit) * inv_feather, 0.0, 1.0);
		color = mix(color, border_color, border_feather_alpha);
	}
	
	float dash_alpha = 1.0 - clamp((dash_dist - dash_limit) * inv_feather, 0.0, 1.0);

	color.a *= feather_alpha * dash_alpha;
	
	finish_fragment2d(color);
}
