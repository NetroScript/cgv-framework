#version 460

//***** begin interface of shape2d.glsl ***********************************
vec2 get_shape_size();
vec4 get_color();
vec4 transform_world_to_window_space(vec2 p);
//***** end interface of shape2d.glsl ***********************************

const vec2 corners[4] = vec2[](
	vec2(0.0, 0.0),
	vec2(1.0, 0.0),
	vec2(0.0, 1.0),
	vec2(1.0, 1.0)
);

struct vertex {
	vec4 position_size;
	vec4 texcoords;
};

layout (std430, binding = 0) readonly buffer data_buffer {
	vertex in_data[];
};

uniform ivec4 position_offset;
uniform float font_size = 32.0;
uniform float angle;

out vec2 pix_coord;
out vec2 tex_coord;

mat2 rotate(in float angle) {
	float c = cos(angle);
	float s = sin(angle);
	mat2 M = mat2(
		c, s,
		-s, c
	);
	return M;
}

void main() {
	int id = gl_VertexID;
	vec2 corner = corners[id];

	vertex v = in_data[gl_BaseInstance + gl_InstanceID];
	v.position_size *= font_size;

	mat2 R = rotate(radians(angle));

	tex_coord = vec2(mix(v.texcoords.xy, v.texcoords.zw, corner));

	// offset local glyph position by text alignment
	vec2 final_position = v.position_size.xy + position_offset.zw;

	// rotate local glyph position	
	final_position = R * final_position;
	
	// move glyph to global position
	final_position += position_offset.xy;

	vec2 size = v.position_size.zw;
	
	// transform to pixel coordinates
	corner *= size;

	// rotate
	corner = R * corner;

	pix_coord = corner - 0.5*size;

	// offset
	corner += final_position;

	gl_Position = transform_world_to_window_space(corner);
}
