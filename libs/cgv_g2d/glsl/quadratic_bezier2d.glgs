#version 430
#extension GL_EXT_geometry_shader4 : enable

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

const vec2 corners[4] = vec2[](
	vec2(0.0, 0.0),
	vec2(1.0, 0.0),
	vec2(0.0, 1.0),
	vec2(1.0, 1.0)
);

uniform ivec2 resolution;
uniform float width = 1.0;
uniform float feather_width = 1.0;

in vec4 pos_a_gs[];
in vec4 pos_b_gs[];
in vec4 pos_c_gs[];
in vec4 color_gs[];

out vec4 color_fs;
out flat vec2 size_fs;
out vec2 tex_coord_fs;
out vec2 pix_coord_fs;
out flat vec2 pos_a_fs;
out flat vec2 pos_b_fs;
out flat vec2 pos_c_fs;

vec2 ortho2d(vec2 v) {
	return vec2(v.y, -v.x);
}

// https://www.shadertoy.com/view/lsyfWc
vec4 bbox_bezier(in vec2 p0, in vec2 p1, in vec2 p2) {
    // extremes
    vec2 mi = min(p0,p2);
    vec2 ma = max(p0,p2);

    // maxima/minima point, if p1 is outside the current bbox/hull
    if( p1.x<mi.x || p1.x>ma.x || p1.y<mi.y || p1.y>ma.y )
    {
        // p = (1-t)^2*p0 + 2(1-t)t*p1 + t^2*p2
        // dp/dt = 2(t-1)*p0 + 2(1-2t)*p1 + 2t*p2 = t*(2*p0-4*p1+2*p2) + 2*(p1-p0)
        // dp/dt = 0 -> t*(p0-2*p1+p2) = (p0-p1);

        vec2 t = clamp((p0-p1)/(p0-2.0*p1+p2),0.0,1.0);
        vec2 s = 1.0 - t;
        vec2 q = s*s*p0 + 2.0*s*t*p1 + t*t*p2;
        
        mi = min(mi,q);
        ma = max(ma,q);
    }
    
    return vec4( mi, ma );
}

vec4 to_window_space(vec2 p) {
	// transform to window space
	vec2 pos = (2.0*p) / resolution;
	return vec4(pos - 1.0, 0.0, 1.0);
}

void main() {
	
	pos_a_fs = pos_a_gs[0].xy;
	pos_b_fs = pos_b_gs[0].xy;
	pos_c_fs = pos_c_gs[0].xy;

	color_fs = color_gs[0];

	vec4 box = bbox_bezier(pos_a_fs, pos_b_fs, pos_c_fs);

	float final_width = width + feather_width;

	// incorporate feather_width
	box.xy -= 0.5*final_width;
	box.zw += 0.5*final_width;

	size_fs = box.zw - box.xy;

	vec2 org = box.xy;

	tex_coord_fs = corners[0];
	pix_coord_fs = size_fs*corners[0] + org;// - 0.5*size_fs;
	gl_Position = to_window_space(box.xy);
	EmitVertex();
	tex_coord_fs = corners[1];
	pix_coord_fs = size_fs*corners[1] + org;// - 0.5*size_fs;
	gl_Position = to_window_space(box.zy);
	EmitVertex();

	tex_coord_fs = corners[2];
	pix_coord_fs = size_fs*corners[2] + org;// - 0.5*size_fs;
	gl_Position = to_window_space(box.xw);
	EmitVertex();
	tex_coord_fs = corners[3];
	pix_coord_fs = size_fs*corners[3] + org;// - 0.5*size_fs;
	gl_Position = to_window_space(box.zw);
	EmitVertex();
}
